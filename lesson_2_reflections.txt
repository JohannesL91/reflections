What happens when you initialize a repository? Why do you need to do it?
	A .git file is created in the current folder and a new repository is created by the command "git init". I need it to do get the version control offered by GIT running. "git status" shows the current branch, the last commit and the files which are in the folder.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is a step inbetween the working directory and the repository. It allows to chose the files I want to commit and make logical commits by doing so.

		http://udacity.github.io/git-styleguide/

How can you use the staging area to make sure you have one commit per logical change?
	With git diff I can see the differences between the working area and the staging area. Then I can add the changed file and see differences with the last commit with git diff --staged.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	If I want to try out something new without knowing if it is going to work or if I need it, I can create a side branch while still be able to change the main programe, e.g. fixing bugs and so on.

How do the diagrams help you visualize the branch structure?
	I can see easily how branches are connected, how new branches are added and how the "flow" of GIT is set up.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	All the commits from both branches are merged and are fitted in the timeline. Because two branches become one, but the parent commit is not the same for all branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Automatic: Easy and fast, but not always clear what and not universal. Manually: See exactly where conflicts are and choose a way to solve them, but can take a lot of time.